{
  "fetch_time": "2025-05-29 01:16:07",
  "stories": [
    {
      "by": "thinkalone",
      "descendants": 29,
      "id": 44120507,
      "kids": [
        44121329,
        44121609,
        44121478,
        44121456,
        44121488,
        44121729,
        44120988,
        44121754,
        44121079,
        44121830,
        44121301,
        44121398,
        44120962,
        44120967
      ],
      "score": 126,
      "time": 1748465250,
      "title": "Long live American Science and Surplus (which needs your help)",
      "type": "story",
      "url": "https://milwaukeerecord.com/city-life/long-live-american-science-surplus-which-needs-your-help/"
    },
    {
      "by": "notorious_pgb",
      "descendants": 27,
      "id": 44120241,
      "kids": [
        44121187,
        44120392,
        44121813,
        44121475,
        44121900,
        44120953,
        44121061,
        44120660,
        44120535,
        44120743,
        44120723,
        44121566,
        44120858,
        44120712,
        44120758
      ],
      "score": 131,
      "text": "This started as a throwaway metaphor in a blog post, but is now fully runnable: a toy RTOS with preemptive multitasking inside of Super Mario Bros. on the NES.<p>Essentially, this is:<p>- A rudimentary preemptive RTOS<p>- Using an unmodified NES emulator (FCEUX) as the CPU<p><pre><code>    - &quot;Unmodified&quot; depending on how you define terms\n</code></pre>\n- With emulator save states as the thread contexts<p>- With support for (very basic) mutexes, interrupt masking, and condition variables<p>- Demonstrated using Super Mario Bros. 1-1 with sections of the map dedicated to various synchronization primitives<p>There are many simplifications and shortcuts taken (doesn&#x27;t even have task priorities), and it doesn&#x27;t map 1:1 to true multithreading (e.g., emulator save states represent the state of the entire machine including RAM, whereas thread contexts represent a much more minimal slice), but I think it&#x27;s A) pretty interesting and B) a unique visceral explanation of threads.",
      "time": 1748463343,
      "title": "A toy RTOS inside Super Mario Bros. using emulator save states",
      "type": "story",
      "url": "https://prettygoodblog.com/p/what-threads-are-part-2"
    },
    {
      "by": "katrinarodri",
      "descendants": 278,
      "id": 44118023,
      "kids": [
        44122106,
        44118251,
        44120049,
        44118550,
        44119477,
        44121625,
        44119013,
        44119032,
        44118176,
        44120691,
        44119337,
        44122004,
        44121862,
        44119348,
        44119038,
        44118885,
        44118482,
        44119509,
        44118442,
        44118367,
        44119088,
        44119867,
        44119659,
        44119313,
        44118190,
        44120316,
        44119704,
        44120236,
        44118913,
        44118572,
        44118599,
        44118249,
        44118481,
        44118431,
        44119497,
        44121386,
        44118357,
        44118630,
        44118603,
        44120040,
        44120555,
        44120151,
        44118381,
        44119188,
        44119654,
        44118423,
        44118197,
        44119134,
        44119004,
        44119494,
        44118652,
        44118995,
        44118745,
        44119109,
        44118592,
        44118605,
        44119689,
        44119720
      ],
      "score": 392,
      "text": "A year ago, my co-founder launched Desktop Docs here on HN. It&#x27;s a Mac app we built with Electron that uses CLIP embeddings to search photos and videos locally with natural language. We got positive feedback from HN and our first paying customers, but the app was almost 1GB and clunky to use.<p>TLDR; rebuilding in Rust was the right move.<p>So we rewrote the app with Rust and Tauri and here are the results:<p>- App size is 83% smaller: 1GB → 172MB\n- DMG Installer is 70% smaller: 232MB → 69.5MB\n- Indexing files is faster: A 38-minute video now indexes in ~3 minutes instead of 10-14 minutes\n- Overall more stability (old app used to randomly crash)<p>The original version worked, but it didn&#x27;t perform well when you tried indexing thousands of images or large videos. We lost a lot of time struggling to optimize Electron’s main-renderer process communication and ended up with a complex worker system to process large batches of media files.<p>For months we wrestled with indecision about continuing to optimize the Electron app vs. starting a full rebuild in Swift or Rust. The main thing holding us back was that we hadn’t coded in Swift in almost 10 years and we didn’t know Rust very well.<p>What finally broke us was when users complained the app crashed their video calls just running in background. I guess that’s what happens when you ship an app with Chromium that takes up 200mb before any application code.<p>Today the app still uses CLIP for embeddings and Redis for vector storage and search, except Rust now handles the image and video processing pipeline and all the file I&#x2F;O to let users browse their entire machine, not just indexed files.<p>For the UI, we decided to rebuild it from scratch instead of porting over the old UI. This turned out well because it resulted in a cleaner, simpler UI after living with the complexity of the old version.<p>The trickiest part of the migration was learning Rust. LLMs definitely help, but the Rust&#x2F;Tauri community just isn’t as mature compared to Electron. Bundling Redis into the app was a permissioning nightmare, but I think our solution with Rust handles this better than what we had with Electron.<p>All in, the rebuild took about two months and still needs some more work to be at total parity with its Electron version, but the core functionality of indexing and searching files is way more performant than before and that made it worth the time. Sometimes you gotta throw away working code to build the right thing.<p>AMA about Rust&#x2F;Tauri migration, Redis bundling nightmares, how CLIP embeddings work for local semantic search, or why Electron isn&#x27;t always the answer.",
      "time": 1748451191,
      "title": "Show HN: I rewrote my Mac Electron app in Rust",
      "type": "story",
      "url": "https://desktopdocs.com/?v=2025"
    },
    {
      "by": "anarazel",
      "descendants": 105,
      "id": 44117722,
      "kids": [
        44118217,
        44118042,
        44118816,
        44122031,
        44117959,
        44119089,
        44119549,
        44121306,
        44118517,
        44120054,
        44118657,
        44117842,
        44121555,
        44119391,
        44118607,
        44118070,
        44118823,
        44118323,
        44119613,
        44118748
      ],
      "score": 210,
      "time": 1748449700,
      "title": "Compiler Explorer and the promise of URLs that last forever",
      "type": "story",
      "url": "https://xania.org/202505/compiler-explorer-urls-forever"
    },
    {
      "by": "master_crab",
      "descendants": 115,
      "id": 44121732,
      "kids": [
        44121816,
        44122034,
        44122120,
        44121846,
        44121935,
        44121888,
        44122032,
        44122109,
        44121936,
        44121833,
        44121861,
        44121737,
        44121922,
        44121783,
        44121776,
        44121825,
        44121838,
        44121947,
        44121827,
        44122125
      ],
      "score": 171,
      "time": 1748477179,
      "title": "US Trade Court Finds Trump Tariffs Illegal",
      "type": "story",
      "url": "https://www.bloomberg.com/news/articles/2025-05-28/trump-s-global-tariffs-blocked-by-us-trade-court"
    },
    {
      "by": "jmsflknr",
      "descendants": 116,
      "id": 44117779,
      "kids": [
        44121142,
        44119728,
        44121894,
        44119189,
        44118449,
        44121465,
        44118555,
        44121740,
        44121556,
        44121053,
        44121818,
        44118580,
        44118622,
        44119034,
        44119663,
        44118515,
        44118692,
        44120067,
        44120578,
        44118935,
        44119537,
        44118794,
        44121120,
        44118495,
        44118837,
        44119500,
        44119475,
        44119194,
        44120839,
        44118862
      ],
      "score": 166,
      "time": 1748450029,
      "title": "Japan Post launches 'digital address' system",
      "type": "story",
      "url": "https://www.japantimes.co.jp/business/2025/05/27/companies/japan-post-digital-address/"
    },
    {
      "by": "todsacerdoti",
      "descendants": 64,
      "id": 44118373,
      "kids": [
        44119588,
        44122043,
        44118846,
        44122101,
        44121920,
        44119809,
        44120708,
        44121217,
        44120856,
        44119241,
        44121335,
        44119006,
        44118682,
        44121290,
        44119274
      ],
      "score": 186,
      "time": 1748452967,
      "title": "Compiling a neural net to C for a speedup",
      "type": "story",
      "url": "https://slightknack.dev/blog/difflogic/"
    },
    {
      "by": "alex_hirner",
      "descendants": 9,
      "id": 44086429,
      "kids": [
        44119842,
        44120703,
        44119625,
        44121271,
        44121265,
        44120374,
        44119896
      ],
      "score": 101,
      "time": 1748162026,
      "title": "Visualize and debug Rust programs with a new lens",
      "type": "story",
      "url": "https://firedbg.sea-ql.org/"
    },
    {
      "by": "BerislavLopac",
      "descendants": 62,
      "id": 44119890,
      "kids": [
        44122045,
        44121835,
        44121032,
        44120484,
        44120103,
        44122064,
        44120811,
        44120615,
        44120587,
        44120530,
        44120441,
        44120288,
        44121571,
        44120541,
        44120342
      ],
      "score": 66,
      "time": 1748461067,
      "title": "What does “Undecidable” mean, anyway",
      "type": "story",
      "url": "https://buttondown.com/hillelwayne/archive/what-does-undecidable-mean-anyway/"
    },
    {
      "by": "nsoonhui",
      "descendants": 67,
      "id": 44087809,
      "kids": [
        44120802,
        44121275,
        44121030,
        44120917,
        44121363,
        44121689,
        44121741,
        44121340,
        44121731,
        44121821,
        44121560,
        44121052,
        44121365,
        44120733,
        44121745
      ],
      "score": 64,
      "time": 1748180816,
      "title": "What If We Had Bigger Brains? Imagining Minds Beyond Ours",
      "type": "story",
      "url": "https://writings.stephenwolfram.com/2025/05/what-if-we-had-bigger-brains-imagining-minds-beyond-ours/"
    },
    {
      "by": "AlexeyBrin",
      "descendants": 0,
      "id": 44087248,
      "score": 17,
      "time": 1748175044,
      "title": "Basic for the Raspberry Pi Pico and Pico 2",
      "type": "story",
      "url": "https://geoffg.net/picomite.html"
    },
    {
      "by": "ucarion",
      "descendants": 47,
      "id": 44117059,
      "kids": [
        44119005,
        44118344,
        44119766,
        44117574,
        44118637,
        44118781,
        44118915,
        44119198,
        44118496,
        44118119,
        44119168,
        44117368,
        44120993,
        44117562,
        44120595,
        44117543
      ],
      "score": 134,
      "text": "Hi folks! I&#x27;m Ulysse, and Tesseral (<a href=\"https:&#x2F;&#x2F;github.com&#x2F;tesseral-labs&#x2F;tesseral\">https:&#x2F;&#x2F;github.com&#x2F;tesseral-labs&#x2F;tesseral</a>) is open-source auth for B2B SaaS.<p>Early in my career, I worked on enterprise auth and security features at Segment. I&#x27;ve been obsessed with the subtle details of enterprise software ever since. For example, I wrote an implementation of SAML in the early days of the COVID pandemic because I thought it was fun.<p>Over the years, I&#x27;ve felt frustrated that too few people have seemed interested in making auth obvious for developers of business software. Auth really doesn&#x27;t need to be so confusing.<p>We made Tesseral to help software engineers get B2B auth exactly right – and focus their energy on building the features that users want.<p>You can use Tesseral to stand up a login page, authenticate your users, and manage their access to resources. Think of it like Auth0 or Clerk, but open source and built specifically for B2B apps. Among other things, that means that it’s designed for B2B multi-tenancy and includes enterprise-ready features like single sign-on (SAML SSO), multi-factor authentication (MFA), SCIM provisioning, and role-based access control (RBAC).<p>For those who expose public APIs, you can use Tesseral to manage API keys for your customers. You can even limit the scope of API keys to specific actions by using our RBAC feature.<p>We&#x27;ve taken care to make Tesseral powerful and secure enough to power real enterprise software but still leave it simple enough for any software developer to use. You don&#x27;t have to be a security expert to implement Tesseral. (By default, therefore, Tesseral imposes a few opinions. Let us know if you have a good reason to do something unusual, and we&#x27;ll work something out.)<p>If you want to experiment with Tesseral, you can host it yourself or use our hosted service. The hosted service lives at <a href=\"https:&#x2F;&#x2F;console.tesseral.com\">https:&#x2F;&#x2F;console.tesseral.com</a>. You can find documentation here: <a href=\"https:&#x2F;&#x2F;tesseral.com&#x2F;docs\">https:&#x2F;&#x2F;tesseral.com&#x2F;docs</a>.<p>Here are a few simple demos:<p><a href=\"https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=IhYPzz3vB54\" rel=\"nofollow\">https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=IhYPzz3vB54</a><p><a href=\"https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=t-JJ8TNjqNU\" rel=\"nofollow\">https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=t-JJ8TNjqNU</a><p><a href=\"https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=mwthBIRZO8k\" rel=\"nofollow\">https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=mwthBIRZO8k</a><p>We&#x27;re in the early stages of the project, so we still have some gaps. We have more features, bug fixes, SDKs, and documentation on the way.<p>What have we missed? What can we do better? We&#x27;re eager to hear from the community!",
      "time": 1748446062,
      "title": "Show HN: Tesseral – Open-Source Auth",
      "type": "story",
      "url": "https://github.com/tesseral-labs/tesseral"
    },
    {
      "by": "alberto-m",
      "descendants": 6,
      "id": 44087898,
      "kids": [
        44122128,
        44122141,
        44121474,
        44121620,
        44121105
      ],
      "score": 38,
      "time": 1748181607,
      "title": "A Visual History of Chessmen",
      "type": "story",
      "url": "https://chesshistory.github.io/"
    },
    {
      "by": "moonikakiss",
      "descendants": 9,
      "id": 44121177,
      "kids": [
        44121684,
        44121680,
        44121742,
        44121648,
        44121655
      ],
      "score": 26,
      "time": 1748470938,
      "title": "HTAP Databases Are Dead",
      "type": "story",
      "url": "https://www.mooncake.dev/blog/htap-is-dead"
    },
    {
      "by": "hahahacorn",
      "descendants": 0,
      "id": 44101997,
      "score": 24,
      "time": 1748296188,
      "title": "Unlocking Ractors: class instance variables in Ruby",
      "type": "story",
      "url": "https://byroot.github.io/ruby/performance/2025/05/24/unlocking-ractors-class-variables.html"
    },
    {
      "by": "skeptrune",
      "descendants": 48,
      "id": 44116872,
      "kids": [
        44122103,
        44120023,
        44120925,
        44120573,
        44119724,
        44120002,
        44118548,
        44119129,
        44119353,
        44119733,
        44119710,
        44119190,
        44118773,
        44119362,
        44118801,
        44118327
      ],
      "score": 91,
      "time": 1748445218,
      "title": "LLM codegen go brrr – Parallelization with Git worktrees and tmux",
      "type": "story",
      "url": "https://www.skeptrune.com/posts/git-worktrees-agents-and-tmux/"
    },
    {
      "by": "error404x",
      "descendants": 102,
      "id": 44118818,
      "kids": [
        44122146,
        44121224,
        44119182,
        44119047,
        44119037,
        44119044,
        44121601,
        44119993,
        44120218,
        44120934,
        44119652
      ],
      "score": 267,
      "time": 1748455142,
      "title": "Deepseek R1-0528",
      "type": "story",
      "url": "https://huggingface.co/deepseek-ai/DeepSeek-R1-0528"
    },
    {
      "by": "ingve",
      "descendants": 242,
      "id": 44113210,
      "kids": [
        44116231,
        44113516,
        44113391,
        44114405,
        44122008,
        44119763,
        44113608,
        44121570,
        44117445,
        44121567,
        44116343,
        44118882,
        44113373,
        44121113,
        44113533,
        44116197,
        44113423,
        44119900,
        44121295,
        44119702,
        44117429,
        44120013,
        44120014,
        44120609,
        44117469,
        44117088,
        44116328,
        44113554,
        44117366,
        44116473,
        44113887,
        44117818,
        44119339,
        44116577,
        44116196,
        44113499,
        44119963,
        44113459,
        44113775,
        44113750,
        44113918,
        44113903,
        44117973,
        44119163,
        44116832,
        44114348,
        44116381,
        44114333,
        44115907,
        44117023,
        44113514,
        44117840,
        44117630,
        44113550,
        44113432,
        44116960,
        44116826,
        44121703,
        44116569,
        44116143,
        44113436,
        44113536,
        44116671,
        44117829
      ],
      "score": 359,
      "time": 1748413631,
      "title": "As a developer, my most important tools are a pen and a notebook",
      "type": "story",
      "url": "https://hamatti.org/posts/as-a-developer-my-most-important-tools-are-a-pen-and-a-notebook/"
    },
    {
      "by": "DbigCOX",
      "descendants": 81,
      "id": 44116236,
      "kids": [
        44118134,
        44117544,
        44117096,
        44116637,
        44116698,
        44119228,
        44117618,
        44119097,
        44118281,
        44120327,
        44118571,
        44117169,
        44119213,
        44118639,
        44118061,
        44118638,
        44117200
      ],
      "score": 150,
      "time": 1748441507,
      "title": "De-anonymization attacks against the privacy coin XMR",
      "type": "story",
      "url": "https://monero.forex/is-monero-totally-private-a-comprehensive-analysis-of-de-anonymization-attacks-against-the-privacy-coin/"
    },
    {
      "by": "ibobev",
      "descendants": 2,
      "id": 44096823,
      "kids": [
        44122066
      ],
      "score": 10,
      "time": 1748262593,
      "title": "Grass Rendering Series",
      "type": "story",
      "url": "https://hexaquo.at/pages/grass-rendering-series-part-1-theory/"
    },
    {
      "by": "davidchl",
      "id": 44118127,
      "score": 1,
      "text": "About us: \nWe&#x27;re a digital caregiver that helps older &amp; disabled adults avoid retirement communities and age well in their own homes. We tailor on demand APIs from companies like Uber and Instacart to the needs of people living with cognitive, visual, mobility and dexterity impairments. We&#x27;re operating profitably with millions in revenue and growing quickly. Our company is remote first. Total engineering headcount, including this position, is eight.<p>The positions:\nFULLY REMOTE | Full-time | US, UK, or able to work 4+ hours overlap with mainland US (UK time working hours also OK) | $100k to $160k (partially location-dependent)<p>Build high-quality, robust engineering at the rarest of things - a Silicon Valley startup that is both wholesome AND profitable. We have 8-figure revenue, are YC-backed, and growing fast.<p>Tech stack (<i>required): Back-end heavy (Node</i>, Typescript<i>, MySQL</i>, REST*+GraphQL), front-end (Vue), deploy (AWS, Docker&#x2F;K8s)<p>Minimum 6 years experience (mostly Node&#x2F;Vue)<p>2-stage interview process.<p>If you want to help older adults and people with disabilities, send your LinkedIn&#x2F;CV to william@gogograndparent.com (keep it brief) or apply at <a href=\"https:&#x2F;&#x2F;www.ycombinator.com&#x2F;companies&#x2F;gogograndparent&#x2F;jobs\">https:&#x2F;&#x2F;www.ycombinator.com&#x2F;companies&#x2F;gogograndparent&#x2F;jobs</a>",
      "time": 1748451686,
      "title": "GoGoGrandparent (YC S16) is hiring Back end Engineers",
      "type": "job"
    },
    {
      "by": "surprisetalk",
      "descendants": 101,
      "id": 44115973,
      "kids": [
        44120725,
        44116651,
        44119341,
        44116027,
        44121898,
        44121413,
        44116818,
        44116607,
        44117374,
        44121518,
        44119424,
        44120437,
        44116525,
        44117662,
        44116668,
        44121425,
        44118965,
        44116449,
        44118309,
        44116617,
        44116843
      ],
      "score": 127,
      "time": 1748439818,
      "title": "The Blowtorch Theory: A new model for structure formation in the universe",
      "type": "story",
      "url": "https://theeggandtherock.com/p/the-blowtorch-theory-a-new-model"
    },
    {
      "by": "modinfo",
      "descendants": 2,
      "id": 44095553,
      "kids": [
        44121088,
        44095591
      ],
      "score": 20,
      "time": 1748251392,
      "title": "YAD: display graphical dialogs from shell scripts or command line",
      "type": "story",
      "url": "http://yad-guide.ingk.se/#_introduction"
    },
    {
      "by": "bveiseh",
      "descendants": 18,
      "id": 44117465,
      "kids": [
        44120360,
        44119206,
        44118218,
        44119091,
        44117925,
        44118538,
        44117986
      ],
      "score": 41,
      "text": "Hey HN! We&#x27;re Brandon, Sam, and Akul from MindFort (<a href=\"https:&#x2F;&#x2F;mindfort.ai\">https:&#x2F;&#x2F;mindfort.ai</a>). We&#x27;re building autonomous AI agents that continuously find, validate, and patch security vulnerabilities in web applications—essentially creating an AI red team that runs 24&#x2F;7.<p>Here&#x27;s a demo: <a href=\"https:&#x2F;&#x2F;www.loom.com&#x2F;share&#x2F;e56faa07d90b417db09bb4454dce8d5a\" rel=\"nofollow\">https:&#x2F;&#x2F;www.loom.com&#x2F;share&#x2F;e56faa07d90b417db09bb4454dce8d5a</a><p>Security testing today is increasingly challenging. Traditional scanners generate 30-50% false positives, drowning engineering teams in noise. Manual penetration testing happens quarterly at best, costs tens of thousands per assessment, and takes weeks to complete. Meanwhile, teams are shipping code faster than ever with AI assistance, but security reviews have become an even bigger bottleneck.<p>All three of us encountered this problem from different angles. Brandon worked at ProjectDiscovery building the Nuclei scanner, then at NetSPI (one of the largest pen testing firms) building AI tools for testers. Sam was a senior engineer at Salesforce leading security for Tableau. He dealt firsthand with juggling security findings and managing remediations. Akul did his master&#x27;s on AI and security, co-authored papers on using LLMs for ecurity attacks, and participated in red-teams at OpenAI and Anthropic.<p>We all realized that AI agents were going to fundamentally change security testing, and that the wave of AI-generated code would need an equally powerful solution to keep it secure.<p>We&#x27;ve built AI agents that perform reconnaissance, exploit vulnerabilities, and suggest patches—similar to how a human penetration tester works. The key difference from traditional scanners is that our agents validate exploits in runtime environments before reporting them, reducing false positives.<p>We use multiple foundational models orchestrated together. The agents perform recon to understand the attack surface, then use that context to inform testing strategies. When they find potential vulnerabilities, they spin up isolated environments to validate exploitation. If successful, they analyze the codebase to generate contextual patches.<p>What makes this different from existing tools? Validation through exploitation: We don&#x27;t just pattern-match—we exploit vulnerabilities to prove they&#x27;re real; - Codebase integration: The agents understand your code structure to find complex logic bugs and suggest appropriate fixes; - Continuous operation: Instead of point-in-time assessments, we&#x27;re constantly testing as your code evolves; - Attack chain discovery: The agents can find multi-step vulnerabilities that require chaining different issues together.<p>We&#x27;re currently in early access, working with initial partners to refine the platform. Our agents are already finding vulnerabilities that other tools miss and scoring well on penetration testing benchmarks.<p>Looking forward to your thoughts and comments!",
      "time": 1748448044,
      "title": "Launch HN: MindFort (YC X25) – AI agents for continuous pentesting",
      "type": "story"
    },
    {
      "by": "the-mitr",
      "descendants": 18,
      "id": 44087390,
      "kids": [
        44120736,
        44121666,
        44121234,
        44120763,
        44121617,
        44119857,
        44120122,
        44120211,
        44120042,
        44117893
      ],
      "score": 68,
      "time": 1748176707,
      "title": "Mathematical Fiction",
      "type": "story",
      "url": "https://kasmana.people.charleston.edu/MATHFICT/default.html"
    },
    {
      "by": "evanb",
      "descendants": 18,
      "id": 44120224,
      "kids": [
        44120914,
        44121610,
        44121376
      ],
      "score": 18,
      "time": 1748463236,
      "title": "The anomalous magnetic moment of the muon in the Standard Model: an update",
      "type": "story",
      "url": "https://arxiv.org/abs/2505.21476"
    },
    {
      "by": "lafond",
      "descendants": 146,
      "id": 44117302,
      "kids": [
        44121013,
        44122081,
        44119726,
        44122000,
        44117586,
        44121656,
        44119972,
        44117538,
        44121305,
        44119624,
        44117427,
        44117764,
        44117535,
        44117485,
        44119024,
        44121594,
        44120084,
        44120878,
        44119301,
        44117700,
        44117907,
        44118925,
        44118163,
        44117508,
        44117771,
        44117466,
        44119862,
        44119801,
        44121204,
        44119261,
        44117423,
        44117436,
        44117433,
        44117653,
        44120239,
        44117446,
        44117372,
        44117848
      ],
      "score": 246,
      "time": 1748447317,
      "title": "Getting a Cease and Desist from Waffle House",
      "type": "story",
      "url": "https://www.jack.bio/blog/wafflehouse"
    },
    {
      "by": "simonw",
      "descendants": 157,
      "id": 44110584,
      "kids": [
        44111485,
        44111376,
        44121007,
        44116471,
        44112690,
        44111846,
        44112327,
        44110809,
        44114382,
        44111958,
        44111329,
        44111128,
        44112865,
        44114565,
        44111909,
        44110814,
        44113927,
        44113029,
        44114614,
        44113082,
        44114709,
        44113102,
        44114422,
        44110660,
        44115653,
        44111402,
        44112576,
        44114477,
        44110932,
        44114721,
        44110671,
        44112473,
        44111473,
        44110785
      ],
      "score": 491,
      "time": 1748379183,
      "title": "Show HN: My LLM CLI tool can run tools now, from Python code or plugins",
      "type": "story",
      "url": "https://simonwillison.net/2025/May/27/llm-tools/"
    },
    {
      "by": "speckx",
      "descendants": 85,
      "id": 44119173,
      "kids": [
        44120101,
        44120228,
        44120757,
        44119946,
        44119913,
        44121436,
        44120412,
        44120189,
        44120565,
        44120591,
        44120187,
        44120407,
        44119996,
        44120867,
        44121231,
        44120311
      ],
      "score": 69,
      "time": 1748457328,
      "title": "Prohibition and ice cream in the US Navy",
      "type": "story",
      "url": "https://www.oldsaltblog.com/2025/05/how-ice-cream-replaced-booze-in-the-us-navy-2/"
    },
    {
      "by": "surprisetalk",
      "descendants": 2,
      "id": 44088392,
      "kids": [
        44090551
      ],
      "score": 30,
      "time": 1748185800,
      "title": "Implementing complex numbers and FFT with just datatypes (2023)",
      "type": "story",
      "url": "https://gist.github.com/VictorTaelin/5776ede998d0039ad1cc9b12fd96811c"
    },
    {
      "by": "Fibra",
      "descendants": 1,
      "id": 44086721,
      "kids": [
        44121327
      ],
      "score": 15,
      "time": 1748166606,
      "title": "Collatz's Ant and Similarity of Landscapes",
      "type": "story",
      "url": "https://gbragafibra.github.io/2025/05/18/collatz_ant3.html"
    },
    {
      "by": "codelion",
      "descendants": 62,
      "id": 44112326,
      "kids": [
        44112333,
        44113157,
        44115504,
        44112490,
        44117358,
        44114284,
        44113283,
        44120047,
        44117128,
        44114265,
        44112688,
        44114458,
        44113551,
        44112728,
        44112897,
        44115367,
        44112884,
        44112574,
        44114719,
        44112652,
        44112478,
        44113384
      ],
      "score": 383,
      "text": "I built AutoThink, a technique that makes local LLMs reason more efficiently by adaptively allocating computational resources based on query complexity.<p>The core idea: instead of giving every query the same &quot;thinking time,&quot; classify queries as HIGH or LOW complexity and allocate thinking tokens accordingly. Complex reasoning gets 70-90% of tokens, simple queries get 20-40%.<p>I also implemented steering vectors derived from Pivotal Token Search (originally from Microsoft&#x27;s Phi-4 paper) that guide the model&#x27;s reasoning patterns during generation. These vectors encourage behaviors like numerical accuracy, self-correction, and thorough exploration.<p>Results on DeepSeek-R1-Distill-Qwen-1.5B:<p>- GPQA-Diamond: 31.06% vs 21.72% baseline (+43% relative improvement)<p>- MMLU-Pro: 26.38% vs 25.58% baseline<p>- Uses fewer tokens than baseline approaches<p>Works with any local reasoning model - DeepSeek, Qwen, custom fine-tuned models. No API dependencies.<p>The technique builds on two things I developed: an adaptive classification framework that can learn new complexity categories without retraining, and an open source implementation of Pivotal Token Search.<p>Technical paper: <a href=\"https:&#x2F;&#x2F;papers.ssrn.com&#x2F;sol3&#x2F;papers.cfm?abstract_id=5253327\" rel=\"nofollow\">https:&#x2F;&#x2F;papers.ssrn.com&#x2F;sol3&#x2F;papers.cfm?abstract_id=5253327</a><p>Code and examples: <a href=\"https:&#x2F;&#x2F;github.com&#x2F;codelion&#x2F;optillm&#x2F;tree&#x2F;main&#x2F;optillm&#x2F;autothink\">https:&#x2F;&#x2F;github.com&#x2F;codelion&#x2F;optillm&#x2F;tree&#x2F;main&#x2F;optillm&#x2F;autoth...</a><p>PTS implementation: <a href=\"https:&#x2F;&#x2F;github.com&#x2F;codelion&#x2F;pts\">https:&#x2F;&#x2F;github.com&#x2F;codelion&#x2F;pts</a><p>I&#x27;m curious about your thoughts on adaptive resource allocation for AI reasoning. Have you tried similar approaches with your local models?",
      "time": 1748399951,
      "title": "Show HN: AutoThink – Boosts local LLM performance with adaptive reasoning",
      "type": "story"
    },
    {
      "by": "microflash",
      "descendants": 156,
      "id": 44116503,
      "kids": [
        44116918,
        44116980,
        44116785,
        44121482,
        44117841,
        44117759,
        44116875,
        44121765,
        44117601,
        44121292,
        44119431,
        44117795,
        44117410,
        44116950,
        44117464,
        44117255,
        44117199,
        44117984,
        44116812,
        44118028,
        44116945,
        44118325,
        44116970,
        44117994,
        44118941,
        44118077,
        44117938,
        44117678,
        44116955,
        44119645,
        44118391,
        44117295,
        44116883,
        44116741,
        44117519,
        44116964,
        44117238,
        44117267,
        44117074
      ],
      "score": 307,
      "time": 1748443132,
      "title": "Mullvad Leta",
      "type": "story",
      "url": "https://leta.mullvad.net"
    },
    {
      "by": "e12e",
      "descendants": 5,
      "id": 44087798,
      "kids": [
        44119419,
        44120453,
        44120415,
        44119579
      ],
      "score": 50,
      "time": 1748180707,
      "title": "Building interactive web pages with Guile Hoot",
      "type": "story",
      "url": "https://spritely.institute/news/building-interactive-web-pages-with-guile-hoot.html"
    },
    {
      "by": "freetonik",
      "descendants": 339,
      "id": 44116862,
      "kids": [
        44118889,
        44118071,
        44121222,
        44118397,
        44118292,
        44117491,
        44118633,
        44119232,
        44120460,
        44118466,
        44117819,
        44117077,
        44120893,
        44121021,
        44117595,
        44118337,
        44120504,
        44117318,
        44121615,
        44121072,
        44117972,
        44119586,
        44119411,
        44118695,
        44117142,
        44117382,
        44118554,
        44121214,
        44120946,
        44118348,
        44117235,
        44120300,
        44117730,
        44117760,
        44119861,
        44118000,
        44120944,
        44118242,
        44118206,
        44117711,
        44118444,
        44117112,
        44118359,
        44119067,
        44117882
      ],
      "score": 262,
      "time": 1748445176,
      "title": "xAI to pay telegram $300M to integrate Grok into the chat app",
      "type": "story",
      "url": "https://techcrunch.com/2025/05/28/xai-to-invest-300m-in-telegram-integrate-grok-into-app/"
    },
    {
      "by": "zdw",
      "descendants": 185,
      "id": 44094109,
      "kids": [
        44116108,
        44117850,
        44113540,
        44113518,
        44113678,
        44117025,
        44113976,
        44113381,
        44120209,
        44114691,
        44113854,
        44114270,
        44113763,
        44113985,
        44113395,
        44119476,
        44116614,
        44113674,
        44114066,
        44113812,
        44113730,
        44113645,
        44113856,
        44119264,
        44116215,
        44113317,
        44113792,
        44113464,
        44113425,
        44113496,
        44114700,
        44113379,
        44113572
      ],
      "score": 155,
      "time": 1748235685,
      "title": "A thought on JavaScript \"proof of work\" anti-scraper systems",
      "type": "story",
      "url": "https://utcc.utoronto.ca/~cks/space/blog/web/JavaScriptScraperObstacles"
    },
    {
      "by": "bicepjai",
      "descendants": 0,
      "id": 44122046,
      "score": 3,
      "time": 1748480263,
      "title": "We Tested Google Veo and Runway to Create This AI Film. It Was Wild [video]",
      "type": "story",
      "url": "https://www.youtube.com/watch?v=US2gO7UYEfY"
    },
    {
      "by": "doener",
      "descendants": 1,
      "id": 44120359,
      "kids": [
        44121309
      ],
      "score": 11,
      "time": 1748464065,
      "title": "Diffusion vs. Autoregressive Language Models: A Text Embedding Perspective",
      "type": "story",
      "url": "https://arxiv.org/abs/2505.15045"
    },
    {
      "by": "keiferski",
      "descendants": 57,
      "id": 44086973,
      "kids": [
        44112568,
        44111953,
        44116990,
        44112743,
        44114438,
        44115430,
        44113659,
        44112864,
        44114303
      ],
      "score": 296,
      "time": 1748171006,
      "title": "The Level Design Book",
      "type": "story",
      "url": "https://book.leveldesignbook.com"
    },
    {
      "by": "testmasterflex",
      "descendants": 61,
      "id": 44116298,
      "kids": [
        44121702,
        44116659,
        44116798,
        44117007,
        44117092,
        44117124,
        44121584,
        44117488,
        44119990,
        44116656,
        44116365,
        44116859,
        44117901,
        44116506,
        44119417,
        44117000,
        44116501,
        44117875,
        44117117,
        44119647,
        44119454,
        44118024,
        44120575,
        44119443,
        44119181,
        44117836,
        44117656,
        44118198,
        44118564,
        44116561,
        44116551
      ],
      "score": 58,
      "text": "Hey HN!<p>I posted here some years ago trying to raise money for a Kickstarter for a product I call Loodio.<p>Loodio is a motion activated music player for bathrooms that plays music during the bathroom visit to give users privacy during their sacred moments.<p>The kickstarter failed, but I managed to create a product eventually with a lot of effort.<p>I managed to sell 150 units of the first unit, mostly to United States but to all different parts of the world while working on the next version.<p>The problem with the first version was that it was running on a Raspberry Pi Zero W (that had to be wall connected) and it was pretty big, had crappy sound and took a minute to start since it had to boot a whole linux system. I was running it on a python script and unix services. To add music, people had to SSH into the unit so you can imagine how painful that was for some.<p>However customers loved it! But I knew I could do better. The most common request was battery operation.<p>Here are some reviews of version 1: \n<a href=\"https:&#x2F;&#x2F;loodio.com&#x2F;pages&#x2F;reviews\" rel=\"nofollow\">https:&#x2F;&#x2F;loodio.com&#x2F;pages&#x2F;reviews</a><p>I&#x27;m proud to say that Loodio 2 is finally here and is working like I imagined when I started working on it almost 5 years ago now.<p>Loodio 2 introduces battery operation with 1 week of battery life (~5 hours of active operation).\nIt has great sound and an easy way to add your own music with SD card support (4GB included).<p>It doesn&#x27;t require any app. Can be run without WiFi (however you lose some features like internet radio, time updates, software updates and weather)<p>Why does it have a display, you may ask?\nBecause, I used to have an electric toothbrush that came with a display. That display showed how long you were brushing to make sure you did your 2 minutes per brush.\nWhen I wasn&#x27;t brushing my teeth, it showed the current time. And I stopped using the electric tooth brush (because a dentist told me they are too harsh on your teeth) but kept the display for probably 5 years afterwards because I noticed I really want to know the time while getting ready for school&#x2F;work in the morning.\nAnother thing I noticed was that I always check the weather outside, so I could dress appropriately.<p>So, Loodio shows you the time and weather (optionally) as well as playing music during your visit. These features together with the lights, are features that I think people don&#x27;t expect to use but with time becomes as important as the music. Customer interviews verify this.<p>I wasted a lot of money trying to outsource the development the first 18 months. I then decided to start doing it myself.\nThe version I&#x27;m selling is actually the 25th(!) iteration of the product. The problem with hardware is that it takes you around a month to iterate a circuit (if you don&#x27;t live next to the factory in Shenzhen) because of the cycle &#x27;Designing-&gt;Order from China-&gt;Testing-&gt;Repeat&#x27;. And I had no experience of electronics when starting out.<p>The enclosure is made from empty PCBs to save money for injection tooling later. It looks pretty cool. But mainly, works great!<p>I want to give credit to Tadeusz Karpinski and Velimir Stoleski that ported my crappy python script to the ESP32 that is running Loodio 2.<p>You need to try it! I really think you&#x27;re gonna like it! <a href=\"https:&#x2F;&#x2F;loodio.com\" rel=\"nofollow\">https:&#x2F;&#x2F;loodio.com</a>",
      "time": 1748441942,
      "title": "Show HN: Loodio 2 – A Simple Rechargable Bathroom Privacy Device",
      "type": "story",
      "url": "https://loodio.com/"
    },
    {
      "by": "mifydev",
      "descendants": 223,
      "id": 44086917,
      "kids": [
        44114139,
        44112937,
        44113031,
        44114321,
        44112625,
        44113936,
        44114345,
        44113305,
        44114051,
        44114230,
        44117170,
        44117376,
        44114830,
        44116821,
        44114396,
        44114273,
        44114081,
        44113873,
        44114526,
        44112616,
        44120024,
        44114001,
        44119385,
        44113332,
        44114122,
        44113140,
        44119919,
        44113914,
        44113956,
        44112762,
        44115243,
        44113002,
        44113068,
        44113320,
        44113179,
        44117684,
        44113089,
        44115650,
        44113035,
        44115026
      ],
      "score": 285,
      "time": 1748170171,
      "title": "The Ingredients of a Productive Monorepo",
      "type": "story",
      "url": "https://blog.swgillespie.me/posts/monorepo-ingredients/"
    },
    {
      "by": "pietrushnic",
      "descendants": 59,
      "id": 44111609,
      "kids": [
        44114234,
        44112078,
        44112233,
        44113295,
        44113087,
        44112167,
        44115488,
        44114637,
        44113322,
        44115553,
        44116346,
        44112476,
        44112273
      ],
      "score": 210,
      "time": 1748389502,
      "title": "Negotiating PoE+ Power in the Pre‑Boot Environment",
      "type": "story",
      "url": "https://roderickkhan.com/posts/2025-05-16-poe-uefi-solution"
    },
    {
      "by": "bikenaga",
      "descendants": 16,
      "id": 44116803,
      "kids": [
        44119708,
        44119578,
        44118284,
        44118693
      ],
      "score": 65,
      "time": 1748444877,
      "title": "The mysterious Gobi wall uncovered",
      "type": "story",
      "url": "https://phys.org/news/2025-05-secrets-mysterious-gobi-wall-uncovered.html"
    },
    {
      "by": "palmfacehn",
      "descendants": 6,
      "id": 44093845,
      "kids": [
        44094258,
        44118414,
        44119433
      ],
      "score": 35,
      "time": 1748231791,
      "title": "Homo erectus from the seabed, new archaeological discoveries in Indonesia",
      "type": "story",
      "url": "https://www.universiteitleiden.nl/en/news/2025/05/homo-erectus-from-the-seabed-new-archaeological-discoveries-in-indonesia"
    },
    {
      "by": "ljosifov",
      "descendants": 28,
      "id": 44111673,
      "kids": [
        44111955,
        44111988,
        44112409,
        44112248,
        44114635,
        44112125,
        44113380,
        44111903,
        44115370,
        44115515,
        44116079,
        44112689
      ],
      "score": 223,
      "time": 1748390480,
      "title": "Look Ma, No Bubbles: Designing a Low-Latency Megakernel for Llama-1B",
      "type": "story",
      "url": "https://hazyresearch.stanford.edu/blog/2025-05-27-no-bubbles"
    },
    {
      "by": "matt_d",
      "descendants": 17,
      "id": 44113026,
      "kids": [
        44113576,
        44115747,
        44114755,
        44119995,
        44115423,
        44113767,
        44114639
      ],
      "score": 88,
      "time": 1748410487,
      "title": "DWARF as a Shared Reverse Engineering Format",
      "type": "story",
      "url": "https://lief.re/blog/2025-05-27-dwarf-editor/"
    },
    {
      "by": "arthursw",
      "descendants": 37,
      "id": 44116643,
      "kids": [
        44116787,
        44117140,
        44116879,
        44117509,
        44117588,
        44116854
      ],
      "score": 27,
      "text": "When building a plugin system for an application, avoiding dependency conflicts is critical. To address this, I created Wetlands – a lightweight Conda environment manager.<p>Wetlands not only simplifies the creation of isolated Conda environments with specific dependencies, but also allows you to run arbitrary Python code within those environments and retrieve the results. It uses the multiprocessing.connection and pickle modules for inter-process communication. Additionally, one can easily use shared memory between the environments, making data exchange more efficient.<p>Docs: <a href=\"https:&#x2F;&#x2F;arthursw.github.io&#x2F;wetlands&#x2F;latest&#x2F;\" rel=\"nofollow\">https:&#x2F;&#x2F;arthursw.github.io&#x2F;wetlands&#x2F;latest&#x2F;</a>\nSource: <a href=\"https:&#x2F;&#x2F;github.com&#x2F;arthursw&#x2F;wetlands&#x2F;\">https:&#x2F;&#x2F;github.com&#x2F;arthursw&#x2F;wetlands&#x2F;</a><p>I’d really appreciate any feedback. Thanks!",
      "time": 1748444044,
      "title": "Show HN: Wetlands – a lightweight Python library for managing Conda environments",
      "type": "story",
      "url": "https://arthursw.github.io/wetlands/0.2.0/"
    },
    {
      "by": "harperlee",
      "descendants": 8,
      "id": 44088261,
      "kids": [
        44121131,
        44119028,
        44118370,
        44117150
      ],
      "score": 64,
      "time": 1748184680,
      "title": "Designing Tools for Scientific Thought",
      "type": "story",
      "url": "https://www.forester-notes.org/tfmt-0001/index.xml"
    },
    {
      "by": "edwardjxli",
      "descendants": 152,
      "id": 44107655,
      "kids": [
        44108954,
        44109414,
        44108266,
        44109981,
        44108661,
        44108958,
        44109101,
        44108447,
        44108771,
        44109054,
        44110510,
        44109277,
        44113116,
        44109519,
        44108562,
        44108844,
        44108814,
        44108564,
        44108524,
        44110664
      ],
      "score": 376,
      "time": 1748358115,
      "title": "Pyrefly vs. Ty: Comparing Python's two new Rust-based type checkers",
      "type": "story",
      "url": "https://blog.edward-li.com/tech/comparing-pyrefly-vs-ty/"
    },
    {
      "by": "walterbell",
      "descendants": 22,
      "id": 44111452,
      "kids": [
        44111829,
        44111738,
        44112898,
        44112515,
        44115129,
        44112494,
        44112588
      ],
      "score": 153,
      "time": 1748387444,
      "title": "OpenTPU: Open-Source Reimplementation of Google Tensor Processing Unit (TPU)",
      "type": "story",
      "url": "https://github.com/UCSBarchlab/OpenTPU"
    },
    {
      "by": "anigbrowl",
      "descendants": 0,
      "id": 44121790,
      "score": 3,
      "time": 1748477876,
      "title": "Weaponized AI chatbot floods Canadian city councils with climate misinformation",
      "type": "story",
      "url": "https://www.desmog.com/2025/05/28/a-weaponized-ai-chatbot-is-flooding-canadian-city-councils-with-climate-misinformation/"
    },
    {
      "by": "1659447091",
      "descendants": 0,
      "id": 44121178,
      "score": 15,
      "time": 1748470951,
      "title": "Oil companies protected ahead of selling fracking water",
      "type": "story",
      "url": "https://www.texastribune.org/2025/05/28/texas-fracking-water-reuse-legislative-protections/"
    },
    {
      "by": "swatson741",
      "descendants": 1,
      "id": 44120480,
      "kids": [
        44120509
      ],
      "score": 4,
      "time": 1748465044,
      "title": "On eval in dynamic languages generally and in Racket specifically (2011)",
      "type": "story",
      "url": "https://blog.racket-lang.org/2011/10/on-eval-in-dynamic-languages-generally.html"
    },
    {
      "by": "bilsbie",
      "descendants": 1,
      "id": 44121115,
      "kids": [
        44122078
      ],
      "score": 12,
      "time": 1748470365,
      "title": "Brain Reset: One Molecular Switch Could Silence Alzheimer's and Parkinson's",
      "type": "story",
      "url": "https://scitechdaily.com/brain-reset-one-molecular-switch-could-silence-alzheimers-and-parkinsons/"
    },
    {
      "by": "NotInOurNames",
      "descendants": 555,
      "id": 44115620,
      "kids": [
        44115986,
        44116426,
        44117514,
        44118261,
        44116140,
        44116744,
        44116244,
        44116724,
        44116038,
        44116560,
        44116360,
        44116222,
        44119355,
        44118131,
        44116218,
        44116000,
        44115956,
        44115884,
        44118547,
        44118297,
        44116387,
        44116051,
        44117332,
        44120361,
        44118184,
        44118981,
        44116513,
        44119632,
        44117735,
        44116377,
        44117512,
        44118259,
        44118694,
        44116564,
        44116909,
        44118536,
        44116500,
        44116721,
        44117357,
        44116004,
        44117334,
        44119472,
        44118363,
        44118474,
        44119222,
        44116815,
        44116976,
        44118092,
        44116841,
        44116208,
        44116177,
        44117797,
        44116015,
        44118993,
        44117047,
        44117337,
        44116923,
        44116203,
        44118385,
        44119440,
        44116075,
        44118328,
        44117507,
        44116474,
        44118988,
        44119029,
        44117171,
        44119262,
        44118501,
        44117460,
        44116284,
        44116185,
        44116968,
        44116623,
        44116340,
        44119479,
        44118040,
        44116825,
        44118678,
        44116476,
        44117727,
        44118640,
        44116062,
        44116251,
        44117336,
        44116966,
        44117421
      ],
      "score": 575,
      "time": 1748437677,
      "title": "The Who Cares Era",
      "type": "story",
      "url": "https://dansinker.com/posts/2025-05-23-who-cares/"
    },
    {
      "by": "ingve",
      "descendants": 53,
      "id": 44086219,
      "kids": [
        44114582,
        44114720,
        44114901,
        44117073,
        44086240,
        44115453,
        44115721,
        44116083,
        44115963,
        44115681
      ],
      "score": 66,
      "time": 1748158647,
      "title": "The length of file names in early Unix",
      "type": "story",
      "url": "https://utcc.utoronto.ca/~cks/space/blog/unix/UnixEarlyFilenameLenghts"
    },
    {
      "by": "cfmcdonald",
      "descendants": 100,
      "id": 44081395,
      "kids": [
        44109951,
        44109466,
        44113280,
        44115353,
        44108726,
        44116855,
        44081597,
        44107957,
        44111350,
        44109035,
        44109842,
        44115471,
        44111323,
        44109258,
        44112876,
        44109115,
        44120210,
        44112991,
        44108478
      ],
      "score": 178,
      "time": 1748097227,
      "title": "The Hobby Computer Culture",
      "type": "story",
      "url": "https://technicshistory.com/2025/05/24/the-hobby-computer-culture/"
    },
    {
      "by": "riprippity",
      "descendants": 65,
      "id": 44087020,
      "kids": [
        44113617,
        44121087,
        44114055,
        44116628,
        44113718,
        44114336,
        44113942,
        44116931,
        44113759,
        44113651
      ],
      "score": 61,
      "time": 1748171690,
      "title": "Chairs, Chairs, Chairs",
      "type": "story",
      "url": "https://www.parliament.uk/about/living-heritage/building/cultural-collections/historic-furniture/the-collection/chairs-chairs-chairs/"
    },
    {
      "by": "aaaronson",
      "descendants": 128,
      "id": 44107942,
      "kids": [
        44108720,
        44108776,
        44108994,
        44108544,
        44108376,
        44109109,
        44108786,
        44113987,
        44109385,
        44109480,
        44116189,
        44109368,
        44112530,
        44110377,
        44111876,
        44108461,
        44109809,
        44113071,
        44114183,
        44109811,
        44111073,
        44108779,
        44110108,
        44115930,
        44109235,
        44110105,
        44110713,
        44111771,
        44111303,
        44108483,
        44113257,
        44109386,
        44109807
      ],
      "score": 693,
      "time": 1748360035,
      "title": "Square Theory",
      "type": "story",
      "url": "https://aaronson.org/blog/square-theory"
    },
    {
      "by": "todsacerdoti",
      "descendants": 57,
      "id": 44083753,
      "kids": [
        44112827,
        44111691,
        44113061,
        44111368,
        44111573,
        44115842,
        44115358,
        44114870,
        44114807,
        44111507,
        44112079,
        44111899,
        44116849,
        44112207
      ],
      "score": 120,
      "time": 1748119991,
      "title": "There Is No Diffie-Hellman but Elliptic Curve Diffie-Hellman",
      "type": "story",
      "url": "https://keymaterial.net/2025/05/23/there-is-no-diffie-hellman-but-elliptic-curve-diffie-hellman/"
    },
    {
      "by": "smartmic",
      "descendants": 85,
      "id": 44105619,
      "kids": [
        44105699,
        44107344,
        44107255,
        44107218,
        44108024,
        44108020,
        44105895,
        44106931,
        44106008,
        44107626,
        44107766,
        44107765,
        44105745,
        44106006
      ],
      "score": 249,
      "time": 1748342370,
      "title": "LumoSQL",
      "type": "story",
      "url": "https://lumosql.org/src/lumosql/doc/trunk/README.md"
    },
    {
      "by": "todsacerdoti",
      "descendants": 9,
      "id": 44090776,
      "kids": [
        44120244,
        44115181,
        44115673,
        44115904,
        44115701,
        44118998
      ],
      "score": 61,
      "time": 1748204696,
      "title": "The Windows Registry Adventure #7: Attack surface analysis",
      "type": "story",
      "url": "https://googleprojectzero.blogspot.com/2025/05/the-windows-registry-adventure-7-attack-surface.html"
    },
    {
      "by": "olivercameron",
      "descendants": 3,
      "id": 44119144,
      "kids": [
        44121671,
        44121829,
        44119665
      ],
      "score": 8,
      "time": 1748457230,
      "title": "AI video you can watch and interact with, in real-time",
      "type": "story",
      "url": "https://experience.odyssey.world"
    },
    {
      "by": "admtal",
      "descendants": 143,
      "id": 44103839,
      "kids": [
        44106366,
        44104643,
        44104601,
        44112577,
        44104748,
        44109824,
        44106115,
        44106079,
        44104244,
        44104440,
        44105485,
        44104402,
        44109044,
        44105456,
        44104319,
        44106029,
        44110344,
        44115393,
        44105261,
        44107390,
        44105776,
        44110495,
        44103948,
        44104756,
        44108118,
        44113124,
        44104569,
        44105072,
        44104917,
        44104370,
        44105167,
        44104589,
        44111468,
        44110056,
        44104725,
        44109279,
        44114355,
        44104588,
        44109625,
        44108331,
        44104340,
        44106905,
        44105083,
        44106466,
        44108578,
        44111580,
        44104516,
        44105464,
        44105516,
        44106483,
        44107639,
        44107792,
        44112757,
        44107061,
        44111196,
        44111036,
        44111533,
        44105960,
        44106995,
        44106026,
        44104480,
        44104604,
        44105264,
        44105653,
        44111527,
        44104871,
        44105999,
        44105795,
        44103874,
        44106210,
        44104713
      ],
      "score": 389,
      "text": "I made a tetris variant<p>Aims to remove all stress, and focus the game on what I like the best - stacking.<p>No timer, no score, no gravity.  Move to the next piece when you are ready, and clear lines when you are ready.<p>Separate mobile + desktop controls",
      "time": 1748318287,
      "title": "Show HN: Lazy Tetris",
      "type": "story",
      "url": "https://lazytetris.com/"
    },
    {
      "by": "robin_reala",
      "descendants": 155,
      "id": 44105796,
      "kids": [
        44106486,
        44106555,
        44107429,
        44106767,
        44112368,
        44106499,
        44110803,
        44107575,
        44114363,
        44111576,
        44107879,
        44108097,
        44106337
      ],
      "score": 328,
      "time": 1748344515,
      "title": "BGP handling bug causes widespread internet routing instability",
      "type": "story",
      "url": "https://blog.benjojo.co.uk/post/bgp-attr-40-junos-arista-session-reset-incident"
    },
    {
      "by": "akyuu",
      "descendants": 24,
      "id": 44117911,
      "kids": [
        44120355,
        44120459,
        44120039,
        44119918,
        44120353,
        44119790,
        44119823,
        44119565,
        44119492
      ],
      "score": 11,
      "time": 1748450702,
      "title": "The Decline of Battery Life",
      "type": "story",
      "url": "https://brainbaking.com/post/2021/07/the-decline-of-battery-life/"
    },
    {
      "by": "tikili",
      "descendants": 1,
      "id": 44087541,
      "kids": [
        44119744
      ],
      "score": 25,
      "time": 1748178504,
      "title": "Programming Basics with Tiki",
      "type": "story",
      "url": "https://tiki.li/"
    },
    {
      "by": "agold97",
      "descendants": 2,
      "id": 44116412,
      "kids": [
        44118267,
        44118139
      ],
      "score": 23,
      "time": 1748442633,
      "title": "FlowTSE: Target Speaker Extraction with Flow Matching",
      "type": "story",
      "url": "https://arxiv.org/abs/2505.14465"
    },
    {
      "by": "eborgnia",
      "descendants": 51,
      "id": 44108206,
      "kids": [
        44108872,
        44112123,
        44109978,
        44109289,
        44119008,
        44110672,
        44115319,
        44112928,
        44109013,
        44108531,
        44112838,
        44112891,
        44108391,
        44108601,
        44111151,
        44113351,
        44112146,
        44109448,
        44114694,
        44109828,
        44108268,
        44109566,
        44112396,
        44108425,
        44108988,
        44112666
      ],
      "score": 104,
      "text": "Hey HN community! We&#x27;re Preston and Eitan, and we&#x27;re building Relace (<a href=\"https:&#x2F;&#x2F;relace.ai\">https:&#x2F;&#x2F;relace.ai</a>). We&#x27;re trying to make building code agents easy and cheap.<p>Here’s an example of our apply model vs. whole file edits:\n<a href=\"https:&#x2F;&#x2F;youtu.be&#x2F;J0-oYyozUZw\" rel=\"nofollow\">https:&#x2F;&#x2F;youtu.be&#x2F;J0-oYyozUZw</a><p>Building reliable code agents is hard. Beyond simple prototypes, any app with code generation in production quickly runs into two problems --  how do you reliably apply diffs, and how do you manage codebase context?<p>We&#x27;re focused on solving these two problems at order-of-magnitude lower price and latency.<p>Our first model that we released, in February, is the Fast Apply model -- it merges code snippets with files at 4300 tok&#x2F;s. It is more reliable (in terms of merge errors) than Sonnet, Qwen, Llama, or any other model at this task. Each file takes ~900ms and gives an instantaneous user experience, as well as saving ~40% on Claude 4 output tokens.<p>Our second model focuses on retrieval. For both vibe-coded and enterprise codebases, retrieving only the files relevant to a user request saves both on SoTA input token cost and reduces the number of times code agents need to view files. Our reranker (evals below) can scan a million-line codebase in ~1-2s, and our embedding model outperforms any other embedding model for retrieval as evaluated on a corpus of Typescript&#x2F;React repositories.<p>There are many different ways to build coding agents, but being able to edit code reliably and retrieve the most relevant parts of the codebase is going to be a foundational issue. We&#x27;re excited to be building ways to make it more accessible to millions of users who don&#x27;t want to spend $$$ on Claude.<p>These models are used in production, millions of times per week. If you&#x27;ve used Lovable, Create.xyz, Magic Patterns, Codebuff, Tempo Labs then you&#x27;ve used us!<p>Here&#x27;s a link to try it out: <a href=\"https:&#x2F;&#x2F;app.relace.ai\">https:&#x2F;&#x2F;app.relace.ai</a>, and here are our docs: <a href=\"https:&#x2F;&#x2F;docs.relace.ai\">https:&#x2F;&#x2F;docs.relace.ai</a>.<p>We&#x27;ve opened up free access for prototyping on our website to everyone, and the limits should be enough for personal coding use and building small projects (correct us if it’s not). We integrate directly with Open-Source IDE&#x27;s like Continue.dev. Please try us out, we&#x27;d love to hear your feedback!",
      "time": 1748361560,
      "title": "Launch HN: Relace (YC W23) – Models for fast and reliable codegen",
      "type": "story"
    },
    {
      "by": "rossdavidh",
      "descendants": 36,
      "id": 44084892,
      "kids": [
        44110910,
        44111491,
        44084893,
        44112117,
        44112818,
        44112500,
        44115337,
        44110870,
        44111286,
        44111334,
        44111796,
        44116050,
        44110921
      ],
      "score": 153,
      "time": 1748136988,
      "title": "Space Selfie",
      "type": "story",
      "url": "https://space.crunchlabs.com/"
    },
    {
      "by": "fscaramuzza",
      "descendants": 30,
      "id": 44110931,
      "kids": [
        44112055,
        44112337,
        44111095,
        44111342,
        44111879,
        44111957,
        44111466,
        44111213,
        44112870,
        44114775,
        44111770,
        44111092,
        44113401,
        44111594,
        44115441,
        44111677,
        44111551
      ],
      "score": 91,
      "time": 1748382534,
      "title": "Mustard Watches (1990)",
      "type": "story",
      "url": "https://girard.perso.math.cnrs.fr/mustard/article.html"
    },
    {
      "by": "nathan-barry",
      "descendants": 39,
      "id": 44109257,
      "kids": [
        44110833,
        44109909,
        44109325,
        44112009,
        44109730,
        44112954,
        44110073,
        44113484,
        44111366
      ],
      "score": 144,
      "time": 1748368971,
      "title": "Running GPT-2 in WebGL: Rediscovering the Lost Art of GPU Shader Programming",
      "type": "story",
      "url": "https://nathan.rs/posts/gpu-shader-programming/"
    },
    {
      "by": "mudkipdev",
      "descendants": 134,
      "id": 44100148,
      "kids": [
        44101598,
        44110175,
        44102710,
        44101646,
        44108282,
        44103099,
        44107263,
        44104598,
        44105669,
        44103867,
        44103781,
        44102703,
        44106436,
        44103649,
        44102525,
        44118953,
        44101699,
        44101771,
        44104271,
        44102704,
        44106762,
        44109124,
        44105694,
        44104990,
        44108568,
        44101998,
        44104003,
        44103189,
        44102274,
        44103115,
        44102015,
        44109139,
        44106257,
        44102057,
        44103481,
        44104546,
        44103279,
        44103092,
        44101873,
        44103750,
        44102346,
        44103089,
        44104967,
        44101615
      ],
      "score": 1157,
      "time": 1748284123,
      "title": "CSS Minecraft",
      "type": "story",
      "url": "https://benjaminaster.com/css-minecraft/"
    },
    {
      "by": "areoform",
      "descendants": 61,
      "id": 44105470,
      "kids": [
        44107836,
        44107242,
        44108414,
        44106590,
        44106500,
        44108471,
        44109248,
        44117499,
        44106959,
        44107276,
        44108466
      ],
      "score": 137,
      "time": 1748340180,
      "title": "Revisiting the algorithm that changed horse race betting (2023)",
      "type": "story",
      "url": "https://actamachina.com/posts/annotated-benter-paper"
    },
    {
      "by": "levkk",
      "descendants": 80,
      "id": 44099187,
      "kids": [
        44103708,
        44104502,
        44102156,
        44099906,
        44100709,
        44109801,
        44103002,
        44102086,
        44100401,
        44099566,
        44101949,
        44112084,
        44099558,
        44102254,
        44101806,
        44102622,
        44102868,
        44099917,
        44107416,
        44100734,
        44105555,
        44100540,
        44100575,
        44099859
      ],
      "score": 291,
      "text": "Hey HN! Lev here, author of PgDog (<a href=\"https:&#x2F;&#x2F;github.com&#x2F;pgdogdev&#x2F;pgdog\">https:&#x2F;&#x2F;github.com&#x2F;pgdogdev&#x2F;pgdog</a>). I’m scaling our favorite database, PostgreSQL. PgDog is a new open source proxy, written in Rust, with first-class support for sharding — without changes to your app or needing database extensions.<p>Here’s a walkthrough of how it works: <a href=\"https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=y6sebczWZ-c\" rel=\"nofollow\">https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=y6sebczWZ-c</a><p>Running Postgres at scale is hard. Eventually, one primary isn’t enough at which point you need to split it up. Since there is currently no good tooling out there to do this, teams end up breaking their apps apart instead.<p>If you’re familiar with PgCat, my previous project, PgDog is its spiritual successor but with a fresh codebase and new goals. If not, PgCat is a pooler for Postgres also written in Rust.<p>So, what’s changed and why a new project? Cross-shard queries are supported out of the box. The new architecture is more flexible, completely asynchronous and supports manipulating the Postgres protocol at any stage of query execution. (Oh, and you guessed it  — I adopted a dog. Still a cat person though!)<p>Not everything is working yet, but simple aggregates like max(), min(), count(*) and sum() are in. More complex functions like percentiles and average will require a bit more work. Sorting (i.e. ORDER BY) works, as long as the values are part of the result set, e.g.:<p><pre><code>     SELECT id, email FROM users\n     WHERE admin = true\n     ORDER BY 1 DESC;\n</code></pre>\nPgDog buffers and sorts the rows in memory, before sending them to the client. Most of the time, the working set is small, so this is fine. For larger results, we need to build swap to disk, just like Postgres does, but for OLTP workloads, which PgDog is targeting, we want to keep things fast. Sorting currently works for bigint, integer, and text&#x2F;varchar. It’s pretty straightforward to add all the other data types, I just need to find the time and make sure to handle binary encoding correctly.<p>All standard Postgres features work as normal for unsharded and direct-to-shard queries. As long as you include the sharding key (a column like customer_id, for example) in your query, you won’t notice a difference.<p>How does this compare to Citus? In case you’re not familiar, Citus is an open source extension for sharding Postgres. It runs inside a single Postgres node (a coordinator) and distributes queries between worker databases.<p>PgDog’s architecture is fundamentally different. It runs outside the DB: it’s a proxy, so you can deploy it anywhere, including managed Postgres like RDS, Cloud SQL and others where Citus isn’t available. It’s multi-threaded and asynchronous, so it can handle thousands, if not millions, of concurrent connections. Its focus is OLTP, not OLAP. Meanwhile, Citus is more mature and has good support for cross-shard queries and aggregates. It will take PgDog a while to catch up.<p>My Rust has improved since my last attempt at this and I learned how to use the bytes crate correctly. PgDog does almost zero memory allocations per request. That results in a 3-5% performance increase over PgCat and a much more consistent p95. If you’re obsessed with performance like me, you know that small percentage is nothing to sneeze at. Like before, multi-threaded Tokio-powered PgDog leaves the single-threaded PgBouncer in the dust (<a href=\"https:&#x2F;&#x2F;pgdog.dev&#x2F;blog&#x2F;pgbouncer-vs-pgdog\">https:&#x2F;&#x2F;pgdog.dev&#x2F;blog&#x2F;pgbouncer-vs-pgdog</a>).<p>Since we’re using pg_query (which itself bundles the Postgres parser), PgDog can understand all Postgres queries. This is important because we can not only correctly extract the WHERE clause and INSERT parameters for automatic routing, but also rewrite queries. This will be pretty useful when we’ll add support for more complex aggregates, like avg(), and cross-shard joins!<p>Read&#x2F;write traffic split is supported out of the box, so you can put PgDog in front of the whole cluster and ditch the code annotations. It’s also a load balancer, so you can deploy it in front of multiple replicas to get 4 9’s of uptime.<p>One of the coolest features so far, in my opinion, is distributed COPY. This works by hacking the Postgres network protocol and sending individual rows to different shards (<a href=\"https:&#x2F;&#x2F;pgdog.dev&#x2F;blog&#x2F;hacking-postgres-wire-protocol\">https:&#x2F;&#x2F;pgdog.dev&#x2F;blog&#x2F;hacking-postgres-wire-protocol</a>). You can just use it without thinking about cluster topology, e.g.:<p><pre><code>    COPY temperature_records (sensor_uuid, created_at, value)\n    FROM STDIN CSV;\n</code></pre>\nThe sharding function is straight out of Postgres partitions and supports uuid v4 and bigint. Technically, it works with any data type, but I just haven’t added all the wrappers yet. Let me know if you need one.<p>What else? Since we have the Postgres parser handy, we can inspect, block and rewrite queries. One feature I was playing with is ensuring that the app is passing in the customer_id in all queries, to avoid data leaks between tenants. Brain dump of that in my blog here:  <a href=\"https:&#x2F;&#x2F;pgdog.dev&#x2F;blog&#x2F;multi-tenant-pg-can-be-easy\">https:&#x2F;&#x2F;pgdog.dev&#x2F;blog&#x2F;multi-tenant-pg-can-be-easy</a>.<p>What’s on the roadmap: (re)sharding Postgres using logical replication, so we can scale DBs without taking downtime. There is a neat trick on how to quickly do this on copy-on-write filesystems (like EBS used by RDS, Google Cloud volumes, ZFS, etc.). I’ll publish a blog post on this soon. More at-scale features like blocking bad queries and just general “I wish my Postgres proxy could do this” stuff. Speaking of which, if you can think of any more features you’d want, get in touch. Your wishlist can become my roadmap.<p>PgDog is being built in the open. If you have thoughts or suggestions about this topic, I would love to hear them. Happy to listen to your battle stories with Postgres as well.<p>Happy hacking!<p>Lev",
      "time": 1748278549,
      "title": "Show HN: PgDog – Shard Postgres without extensions",
      "type": "story",
      "url": "https://github.com/pgdogdev/pgdog"
    },
    {
      "by": "Tomte",
      "descendants": 131,
      "id": 44114621,
      "kids": [
        44116204,
        44114773,
        44117040,
        44114772,
        44118467,
        44115717,
        44120965,
        44116795,
        44117608,
        44114880,
        44114782,
        44120933,
        44118703,
        44114770,
        44114833,
        44116235,
        44118179,
        44115121,
        44114902,
        44114914,
        44115099,
        44114785,
        44118062,
        44114781,
        44114841,
        44114736,
        44115299
      ],
      "score": 104,
      "time": 1748429297,
      "title": "Microsoft is starting to open Windows Update up to any third-party app",
      "type": "story",
      "url": "https://www.theverge.com/news/675446/microsoft-windows-update-all-apps-orchestration-platform"
    },
    {
      "by": "dimitrisnl",
      "descendants": 13,
      "id": 44116341,
      "kids": [
        44121630,
        44120389,
        44116348,
        44120413,
        44118351,
        44117849
      ],
      "score": 22,
      "time": 1748442223,
      "title": "Wake Up, Remix",
      "type": "story",
      "url": "https://remix.run/blog/wake-up-remix"
    },
    {
      "by": "xeonmc",
      "descendants": 61,
      "id": 44106764,
      "kids": [
        44108271,
        44107538,
        44110294,
        44108685,
        44107663,
        44110260,
        44107012,
        44111449,
        44107060,
        44107248,
        44107076,
        44107527,
        44112348,
        44107800,
        44109108,
        44110359,
        44110506,
        44108038,
        44106960,
        44110632,
        44107223,
        44106786,
        44112684
      ],
      "score": 132,
      "time": 1748352345,
      "title": "The Art of Fugue – Contrapunctus I (2021)",
      "type": "story",
      "url": "https://www.ethanhein.com/wp/2021/the-art-of-fugue-contrapunctus-i/"
    },
    {
      "by": "ChuckMcM",
      "descendants": 82,
      "id": 44083474,
      "kids": [
        44107646,
        44083515,
        44111276,
        44107640,
        44106023,
        44106021,
        44106644,
        44116620,
        44107171,
        44109813,
        44107212,
        44109392,
        44108394
      ],
      "score": 114,
      "time": 1748117179,
      "title": "Worlds first petahertz transistor at ambient conditions",
      "type": "story",
      "url": "https://news.arizona.edu/news/u-researchers-developing-worlds-first-petahertz-speed-phototransistor-ambient-conditions"
    },
    {
      "by": "stevekrouse",
      "descendants": 254,
      "id": 44114631,
      "kids": [
        44115157,
        44115209,
        44114971,
        44117144,
        44115006,
        44115401,
        44115174,
        44115090,
        44115010,
        44115025,
        44115024,
        44114897,
        44115088,
        44116528,
        44115020,
        44115089,
        44114974,
        44116352,
        44114936,
        44115359,
        44115142,
        44115472,
        44118513,
        44115390,
        44118212,
        44116451,
        44115857,
        44117643,
        44115061,
        44115103,
        44115222,
        44116757,
        44114920,
        44120205,
        44115220,
        44116465,
        44117072,
        44115486,
        44115711,
        44115616,
        44114932,
        44115416,
        44115352,
        44114890,
        44115788,
        44115248,
        44116470,
        44115120,
        44114949,
        44115395,
        44115169,
        44114955,
        44115913
      ],
      "score": 280,
      "time": 1748429423,
      "title": "AI: Accelerated Incompetence",
      "type": "story",
      "url": "https://www.slater.dev/accelerated-incompetence/"
    },
    {
      "by": "alphacentauri42",
      "descendants": 7,
      "id": 44082472,
      "kids": [
        44115479,
        44116443,
        44120050,
        44116608,
        44117733,
        44115550,
        44115477
      ],
      "score": 24,
      "text": "A CLI flower garden game",
      "time": 1748107533,
      "title": "Show HN: Terminal Flower Garden",
      "type": "story",
      "url": "https://github.com/bdavidzhang/flower-garden-cli"
    },
    {
      "by": "layer8",
      "descendants": 133,
      "id": 44105965,
      "kids": [
        44106330,
        44111479,
        44106867,
        44108444,
        44113343,
        44106721,
        44106073,
        44107467,
        44113161,
        44114610,
        44106269,
        44109031,
        44107568,
        44106282,
        44109028,
        44108671,
        44106835,
        44108031,
        44112648,
        44108621
      ],
      "score": 448,
      "time": 1748346390,
      "title": "How a hawk learned to use traffic signals to hunt more successfully",
      "type": "story",
      "url": "https://www.frontiersin.org/news/2025/05/23/street-smarts-hawk-use-traffic-signals-hunting"
    },
    {
      "by": "donnachangstein",
      "descendants": 53,
      "id": 44110270,
      "kids": [
        44113266,
        44110976,
        44111446,
        44110311,
        44111437,
        44111336,
        44112896,
        44110657,
        44110939,
        44117217,
        44111560,
        44111100,
        44110501,
        44112336,
        44110624,
        44111590,
        44111032
      ],
      "score": 79,
      "time": 1748376598,
      "title": "In Vietnam, an unlikely outpost for Chicano culture",
      "type": "story",
      "url": "https://www.latimes.com/world-nation/story/2025-05-27/chicano-culture-vietnam"
    },
    {
      "by": "amitu",
      "descendants": 48,
      "id": 44107393,
      "kids": [
        44107511,
        44120696,
        44110340,
        44107955,
        44112438,
        44109979,
        44108739,
        44110644,
        44107999,
        44108702,
        44109200,
        44111192,
        44113853,
        44107705,
        44111536,
        44110387,
        44107551,
        44107618,
        44110271
      ],
      "score": 112,
      "text": "malai is a peer to peer network, and is a dead simple to share your local development HTTP server, without setting up tunnels, dealing with firewalls, or relying on cloud services.<p>In malai 0.2.5, we have added TCP support, which means you can expose any TCP service to others using malai, without opening the TCP service related port to Internet. With malai installed on both ends, any TCP service can be securely tunneled over it.<p>It can be used to secure your SSH service, or securely share your database server.<p>GitHub: <a href=\"https:&#x2F;&#x2F;github.com&#x2F;kulfi-project&#x2F;kulfi\">https:&#x2F;&#x2F;github.com&#x2F;kulfi-project&#x2F;kulfi</a> (star us!)<p>Would love feedback, questions, or ideas — thanks!<p>PS: We have also added `malai folder`, which lets you share (readonly) the content of a folder with others.",
      "time": 1748356480,
      "title": "Show HN: Malai – securely share local TCP services (database/SSH) with others",
      "type": "story",
      "url": "https://malai.sh/hello-tcp/"
    },
    {
      "by": "zeristor",
      "descendants": 74,
      "id": 44079729,
      "kids": [
        44104951,
        44110493,
        44105498,
        44105251,
        44079730,
        44105635,
        44113309,
        44105198,
        44105509,
        44105067,
        44105269,
        44105842,
        44106252,
        44105626,
        44105195,
        44104801,
        44104804,
        44106972
      ],
      "score": 74,
      "time": 1748076061,
      "title": "Cows get GPS collars to stop them falling in river",
      "type": "story",
      "url": "https://www.bbc.co.uk/news/articles/cj4229k744lo"
    },
    {
      "by": "bishopsmother",
      "descendants": 108,
      "id": 44081383,
      "kids": [
        44100085,
        44111447,
        44112397,
        44110858,
        44111012,
        44111457,
        44115425,
        44114938,
        44113640,
        44111961,
        44114749,
        44111266,
        44111504,
        44114454,
        44112533,
        44111486,
        44112618,
        44112150,
        44110868,
        44114552,
        44114527,
        44112859,
        44112914,
        44111934,
        44111166,
        44112403,
        44112548,
        44115890
      ],
      "score": 115,
      "time": 1748097131,
      "title": "Semicolons bring the drama; that's why I love them",
      "type": "story",
      "url": "https://www.ft.com/content/80c39c74-8753-44bf-aeb0-cf6701a64f02"
    },
    {
      "by": "intrepidsoldier",
      "descendants": 116,
      "id": 44106944,
      "kids": [
        44107470,
        44110375,
        44109286,
        44108276,
        44107533,
        44107581,
        44109333,
        44108451,
        44108042,
        44107810,
        44107542,
        44110629,
        44112352,
        44110001,
        44113790,
        44111428,
        44107649,
        44107600,
        44107680,
        44109628,
        44107930,
        44107925,
        44107463,
        44109268,
        44108839,
        44109727,
        44111979,
        44107629,
        44107512
      ],
      "score": 166,
      "time": 1748353461,
      "title": "Why Cline doesn't index your codebase",
      "type": "story",
      "url": "https://cline.bot/blog/why-cline-doesnt-index-your-codebase-and-why-thats-a-good-thing"
    },
    {
      "by": "kiselitza",
      "descendants": 61,
      "id": 44115467,
      "kids": [
        44119629,
        44119795,
        44115596,
        44117929,
        44116638,
        44118266,
        44116136,
        44117482,
        44116345,
        44116466,
        44116112,
        44116567,
        44120257,
        44115960,
        44115571,
        44115670
      ],
      "score": 71,
      "text": "Hey HN! Aldin here, a helping hand to Voiden (<a href=\"https:&#x2F;&#x2F;voiden.md\" rel=\"nofollow\">https:&#x2F;&#x2F;voiden.md</a>)<p>Voiden is a free, offline, Git-native API client. Your API definitions, docs, and tests all live together.<p>It came out of years of frustration: cloud sync lock-in, paywalled basics, bloated UIs, and lag on even simple requests. So the team built the opposite: an offline tool with no login, no telemetry, no lock-in. Just markdown and hotkeys.<p>It behaves like code: local files, git branches, no cloud nonsense. Terminal is built-in, so you can commit, diff, and push changes right from the app.<p>Docs stay close to your requests, so that API spec and what the API actually does never drift apart. No more scattered Postman, docs, and test files everywhere. A single source of truth.<p>A minimalist GET request looks something like this:<p><pre><code>      GET\n      https:&#x2F;&#x2F;dummyjson.com&#x2F;posts\n</code></pre>\nJust hit &#x2F;endpoint, paste the URL, and run it with Cmd&#x2F;Ctrl + Enter.<p>Not OSS (yet), but 100% local and free.\nOptional plugins will be coming down the line, but the core stays free.<p>We&#x27;d love feedback from folks tired of overcomplicated and bloated API tooling.",
      "time": 1748436523,
      "title": "Show HN: Voiden – a free, offline, Git-native API Client",
      "type": "story",
      "url": "https://voiden.md"
    },
    {
      "by": "ingve",
      "descendants": 131,
      "id": 44110219,
      "kids": [
        44110919,
        44110411,
        44112367,
        44120414,
        44111188,
        44110428,
        44112930,
        44111769,
        44111653,
        44112852,
        44111784,
        44110844,
        44110600,
        44110824
      ],
      "score": 176,
      "time": 1748376170,
      "title": "Why the original Macintosh had a screen resolution of 512×324",
      "type": "story",
      "url": "https://512pixels.net/2025/05/original-macintosh-resolution/"
    },
    {
      "by": "cratermoon",
      "descendants": 74,
      "id": 44115854,
      "kids": [
        44116867,
        44120695,
        44116878,
        44117607,
        44117084,
        44120134,
        44116869,
        44116822,
        44117432
      ],
      "score": 56,
      "time": 1748439067,
      "title": "Texas' annual reading test adjusted difficulty yearly, masking improvement",
      "type": "story",
      "url": "https://theconversation.com/texas-annual-reading-test-adjusted-its-difficulty-every-year-masking-whether-students-are-improving-244159"
    },
    {
      "by": "swah",
      "descendants": 77,
      "id": 44087195,
      "kids": [
        44109362,
        44109910,
        44109168,
        44109143,
        44109949,
        44109883,
        44109145,
        44110032,
        44110037,
        44110152,
        44110290,
        44109971,
        44110234,
        44109850,
        44110055,
        44110266,
        44109897,
        44109587
      ],
      "score": 95,
      "time": 1748174346,
      "title": "In defense of shallow technical knowledge",
      "type": "story",
      "url": "https://www.seangoedecke.com/shallow-technical-knowledge/"
    },
    {
      "by": "kermatt",
      "descendants": 101,
      "id": 44106934,
      "kids": [
        44109548,
        44107859,
        44112073,
        44114283,
        44107030,
        44108933,
        44107411,
        44108061,
        44108374,
        44115148,
        44107493,
        44108368,
        44111008,
        44108591,
        44108683,
        44107473,
        44108363,
        44108678,
        44109526,
        44112001,
        44108599,
        44110570,
        44110253,
        44107322,
        44107494,
        44108750,
        44109944,
        44107034,
        44107133,
        44110194
      ],
      "score": 260,
      "time": 1748353391,
      "title": "DuckLake is an integrated data lake and catalog format",
      "type": "story",
      "url": "https://ducklake.select/"
    },
    {
      "by": "deryilz",
      "descendants": 10,
      "id": 44111898,
      "kids": [
        44112263,
        44113342,
        44114967,
        44114738
      ],
      "score": 65,
      "time": 1748393325,
      "title": "A privilege escalation from Chrome extensions (2023)",
      "type": "story",
      "url": "https://0x44.xyz/blog/cve-2023-4369/"
    },
    {
      "by": "todsacerdoti",
      "descendants": 47,
      "id": 44086062,
      "kids": [
        44108607,
        44105155,
        44104952,
        44104767,
        44109390,
        44110930,
        44106887,
        44104488,
        44104099
      ],
      "score": 196,
      "time": 1748155719,
      "title": "Clojure MCP",
      "type": "story",
      "url": "https://github.com/bhauman/clojure-mcp"
    },
    {
      "by": "cebert",
      "descendants": 39,
      "id": 44105878,
      "kids": [
        44108131,
        44111195,
        44106920,
        44113347,
        44108082,
        44108144
      ],
      "score": 131,
      "time": 1748345462,
      "title": "Just make it scale: An Aurora DSQL story",
      "type": "story",
      "url": "https://www.allthingsdistributed.com/2025/05/just-make-it-scale-an-aurora-dsql-story.html"
    },
    {
      "by": "bookofjoe",
      "descendants": 0,
      "id": 44121012,
      "score": 4,
      "time": 1748469372,
      "title": "DNA methylation age from peripheral blood predicts Alzheimer's progression",
      "type": "story",
      "url": "https://www.nature.com/articles/s44400-025-00007-1"
    },
    {
      "by": "andy99",
      "descendants": 293,
      "id": 44097390,
      "kids": [
        44100960,
        44104476,
        44101120,
        44104091,
        44106081,
        44097887,
        44103041,
        44107013,
        44102884,
        44105345,
        44104915,
        44100803,
        44120840,
        44100715,
        44102332,
        44103144,
        44101222,
        44100391,
        44103746,
        44101989,
        44101470,
        44110286,
        44104446,
        44104294,
        44105480,
        44102918,
        44102855,
        44101979,
        44102798,
        44103780,
        44103979,
        44100238,
        44100780,
        44104758,
        44105001,
        44112355,
        44104050,
        44105627,
        44101363,
        44105179,
        44106448,
        44100432,
        44110035,
        44106570,
        44106162,
        44105053,
        44107744,
        44097759,
        44105177,
        44103059,
        44100312,
        44100931,
        44101449,
        44103083
      ],
      "score": 491,
      "text": "Related: <a href=\"https:&#x2F;&#x2F;simonwillison.net&#x2F;2025&#x2F;May&#x2F;26&#x2F;github-mcp-exploited&#x2F;\" rel=\"nofollow\">https:&#x2F;&#x2F;simonwillison.net&#x2F;2025&#x2F;May&#x2F;26&#x2F;github-mcp-exploited&#x2F;</a>",
      "time": 1748267185,
      "title": "GitHub MCP exploited: Accessing private repositories via MCP",
      "type": "story",
      "url": "https://invariantlabs.ai/blog/mcp-github-vulnerability"
    },
    {
      "by": "cat-whisperer",
      "descendants": 390,
      "id": 44105592,
      "kids": [
        44105883,
        44105901,
        44107786,
        44106013,
        44105848,
        44107270,
        44105833,
        44110341,
        44106473,
        44107457,
        44108901,
        44106159,
        44107101,
        44106204,
        44109687,
        44117672,
        44106392,
        44111352,
        44116309,
        44106220,
        44109712,
        44107015,
        44110143,
        44105847,
        44105964,
        44114976,
        44107604,
        44105959,
        44109728,
        44106369,
        44109859,
        44106078,
        44105861,
        44107787,
        44106311,
        44106178,
        44106962,
        44107666,
        44106010,
        44106461,
        44106076,
        44111006,
        44110241,
        44108073,
        44106945,
        44111232,
        44107197,
        44107513,
        44110090,
        44109129,
        44107052,
        44106799,
        44105871,
        44108594,
        44106737
      ],
      "score": 353,
      "time": 1748342036,
      "title": "The Myth of Developer Obsolescence",
      "type": "story",
      "url": "https://alonso.network/the-recurring-cycle-of-developer-replacement-hype/"
    },
    {
      "by": "nsoonhui",
      "descendants": 48,
      "id": 44112641,
      "kids": [
        44114792,
        44113290
      ],
      "score": 32,
      "time": 1748405077,
      "title": "Singularities in Space-Time Prove Hard to Kill",
      "type": "story",
      "url": "https://www.quantamagazine.org/singularities-in-space-time-prove-hard-to-kill-20250527/"
    },
    {
      "by": "bturtel",
      "descendants": 15,
      "id": 44106842,
      "kids": [
        44108343,
        44109425,
        44111193,
        44119967,
        44110989
      ],
      "score": 99,
      "time": 1748352818,
      "title": "Outcome-Based Reinforcement Learning to Predict the Future",
      "type": "story",
      "url": "https://arxiv.org/abs/2505.17989"
    }
  ]
}